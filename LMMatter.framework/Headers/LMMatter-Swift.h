#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef LMMATTER_SWIFT_H
#define LMMATTER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Dispatch;
@import Foundation;
@import Matter;
@import ObjectiveC;
@import Security;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LMMatter",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(uint32_t, DeviceType, closed) {
  DeviceTypeBLE_Aqara = 0,
  DeviceTypeBLE_Matter = 1,
  DeviceTypeMDNS_Aqara = 2,
  DeviceTypeMDNS_Matter = 3,
};

typedef SWIFT_ENUM(uint32_t, DiscoverType, closed) {
  DiscoverTypeMDNS = 0,
  DiscoverTypeBLE = 1,
};


@class NSString;
@class LMCertsInfo;

/// PAA证书信息
SWIFT_CLASS("_TtC8LMMatter22LMApprovedCertificates")
@interface LMApprovedCertificates : NSObject
/// Base64 Subject 信息
@property (nonatomic, copy) NSString * _Nullable subject;
/// subjectKeyId
@property (nonatomic, copy) NSString * _Nullable subjectKeyId;
/// 证书信息
@property (nonatomic, copy) NSArray<LMCertsInfo *> * _Nullable certs;
/// YYModel
+ (NSDictionary<NSString *, id> * _Nonnull)modelContainerPropertyGenericClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAA证书信息
SWIFT_CLASS("_TtC8LMMatter11LMCertsInfo")
@interface LMCertsInfo : NSObject
/// PEM证书内容（hexStr）
@property (nonatomic, copy) NSString * _Nullable pemCert;
/// 序列号
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable issuer;
@property (nonatomic, copy) NSString * _Nullable authorityKeyId;
@property (nonatomic, copy) NSString * _Nullable rootSubject;
@property (nonatomic, copy) NSString * _Nullable rootSubjectKeyId;
@property (nonatomic, copy) NSString * _Nullable isRoot;
@property (nonatomic, copy) NSString * _Nullable owner;
@property (nonatomic, copy) NSString * _Nullable subject;
@property (nonatomic, copy) NSString * _Nullable subjectKeyId;
@property (nonatomic, copy) NSString * _Nullable subjectAsText;
@property (nonatomic, copy) NSArray * _Nullable rejects;
@property (nonatomic, copy) NSArray * _Nullable approvals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/// 设备配对参数
SWIFT_CLASS("_TtC8LMMatter25LMMTRBasePairDeviceParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRBasePairDeviceParams : NSObject
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 认证超时时间(默认60s)
@property (nonatomic, strong) NSNumber * _Nonnull failSafeTimeout;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID failSafeExpiryTimeoutSecs:(NSNumber * _Nonnull)failSafeExpiryTimeoutSecs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LMMTRHomeInfo;
@class MTRSetupPayload;

/// AppleHomeParams配对参数
SWIFT_CLASS("_TtC8LMMatter20LMMTRAppleHomeParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRAppleHomeParams : LMMTRBasePairDeviceParams
/// 房间名称
@property (nonatomic, strong) LMMTRHomeInfo * _Nonnull homeInfo;
/// 生态名称
@property (nonatomic, copy) NSString * _Nonnull ecosystemName;
/// 配对内容
@property (nonatomic, strong) MTRSetupPayload * _Nullable setupPayload;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID failSafeExpiryTimeoutSecs:(NSNumber * _Nonnull)failSafeExpiryTimeoutSecs setupPayload:(MTRSetupPayload * _Nullable)setupPayload homeInfo:(LMMTRHomeInfo * _Nonnull)homeInfo ecosystemName:(NSString * _Nonnull)ecosystemName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID failSafeExpiryTimeoutSecs:(NSNumber * _Nonnull)failSafeExpiryTimeoutSecs SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP8LMMatter13LMMTRDiscover_")
@protocol LMMTRDiscover
@optional
/// 开始发现蓝牙设备
- (void)startDiscoverWithServices:(NSArray<NSString *> * _Nonnull)services discoverCallBack:(void (^ _Nullable)(void))discoverCallBack;
/// 开始发现mDNS设备
- (void)startDiscoverOfType:(NSString * _Nonnull)ofType inDomain:(NSString * _Nonnull)inDomain discoverCallBack:(void (^ _Nullable)(void))discoverCallBack;
/// 停止发现设备
- (void)stopDiscover;
/// 释放资源
- (void)destory;
@end


SWIFT_CLASS("_TtC8LMMatter20LMMTRDiscoverManager")
@interface LMMTRDiscoverManager : NSObject <LMMTRDiscover>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCentralManager;

SWIFT_CLASS("_TtC8LMMatter23LMMTRBLEDiscoverManager")
@interface LMMTRBLEDiscoverManager : LMMTRDiscoverManager
@property (nonatomic, copy) void (^ _Nullable onDiscoverCallBack)(void);
- (void)startDiscoverWithServices:(NSArray<NSString *> * _Nonnull)services discoverCallBack:(void (^ _Nullable)(void))discoverCallBack;
- (void)stopDiscover;
- (void)destory;
- (BOOL)isLumiDeviceWithAdvertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isMatterDeviceWithAdvertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CBCentralManager * _Nonnull centralManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBPeripheral;

@interface LMMTRBLEDiscoverManager (SWIFT_EXTENSION(LMMatter)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
@end



/// 关闭配对窗口参数
SWIFT_CLASS("_TtC8LMMatter29LMMTRClosePairingWindowParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRClosePairingWindowParams : NSObject
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LMMTRReadAttributeParams;

SWIFT_CLASS("_TtC8LMMatter22LMMTRClusterStateCache") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRClusterStateCache : MTRClusterStateCacheContainer
- (void)readAttributeWithParams:(LMMTRReadAttributeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter31LMMTRClusterStateCacheContainer") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRClusterStateCacheContainer : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LMMTRClusterStateCacheContainer * _Nonnull instance;)
+ (LMMTRClusterStateCacheContainer * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// 通过设备Id获取属性缓存容器
/// \param nodeID 设备Id
///
///
/// returns:
/// LMMTRAttributeCache
- (LMMTRClusterStateCache * _Nonnull)getAttributeCacheContainerWithNodeID:(NSNumber * _Nonnull)nodeID SWIFT_WARN_UNUSED_RESULT;
/// 缓存属性容器
/// \param nodeID 设备Id
///
/// \param container LMMTRAttributeCache
///
- (void)setAttributeCacheContainerWithNodeID:(NSNumber * _Nonnull)nodeID cache:(LMMTRClusterStateCache * _Nonnull)cache;
/// 移除缓存属性容器
/// \param nodeID 设备Id
///
- (void)removeCacheContainerWithNodeID:(NSNumber * _Nonnull)nodeID;
/// 移除所有缓存属性容器
- (void)removeAllCacheContainer;
/// 读取属性
- (void)readAttributeWithNodeID:(NSNumber * _Nonnull)nodeID params:(LMMTRReadAttributeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter19LMMTRCodableUtility")
@interface LMMTRCodableUtility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRWiFiNetworkParams;
@class LMMTRThreadNetworkParams;

/// Commission相关接口
SWIFT_PROTOCOL("_TtP8LMMatter29LMMTRCommissionDeviceProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRCommissionDeviceProtocol
/// Commission
/// \param wifiParams LMMTRWiFiNetworkParams
///
/// \param threadParams LMMTRThreadNetworkParams
///
- (void)commissionDeviceWithWifiParams:(LMMTRWiFiNetworkParams * _Nullable)wifiParams threadParams:(LMMTRThreadNetworkParams * _Nullable)threadParams;
@end

@class LMMTROpenCommissioningWindowParams;

/// 调试窗口相关接口
SWIFT_PROTOCOL("_TtP8LMMatter32LMMTRCommissioningWindowProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRCommissioningWindowProtocol
/// 打开配对窗口
/// \param params LMMTROpenCommissioningWindowParams
///
/// \param completion LMMTRCommissioningWindowCallBack
///
- (void)openCommissioningWindowWithParams:(LMMTROpenCommissioningWindowParams * _Nonnull)params completion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
/// 关闭配对窗口
/// \param completion LMMTRCommissioningWindowCallBack
///
- (void)closeCommissioningWindowWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC8LMMatter18LMMTRConditionLock")
@interface LMMTRConditionLock : NSConditionLock
- (nonnull instancetype)initWithCondition:(NSInteger)condition OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRLocalCertStartParams;
@class LMMTRRCACertStartParams;
@class LMMTRICACertStartParams;

/// Matter控制器相关接口
SWIFT_PROTOCOL("_TtP8LMMatter23LMMTRControllerProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRControllerProtocol
/// 本地自建证书启动Matter控制器
- (BOOL)startMatterControllerWithLocalCertWithParams:(LMMTRLocalCertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
/// 外部传入RCA证书启动Matter控制器
- (BOOL)startMatterControllerWithRCACertWithParams:(LMMTRRCACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
/// 外部传入ICA证书启动Matter控制器
- (BOOL)startMatterControllerWithICACertWithParams:(LMMTRICACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
/// Extension启动Matter控制器
- (BOOL)startMatterControllerFromExtensionAndReturnError:(NSError * _Nullable * _Nullable)error;
/// 停止Matter控制器
- (void)stopMatterController;
@end

@class MTRBaseDevice;

SWIFT_CLASS("_TtC8LMMatter11LMMTRDevice") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice : NSObject
/// Matter设备
@property (nonatomic, strong) MTRBaseDevice * _Nonnull device;
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 初始化
- (nonnull instancetype)initWithDevice:(MTRBaseDevice * _Nonnull)device nodeID:(NSNumber * _Nonnull)nodeID OBJC_DESIGNATED_INITIALIZER;
/// 初始化
- (nullable instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LMMTRWriteParams;

/// 写入接口
SWIFT_PROTOCOL("_TtP8LMMatter24LMMTRDeviceWriteProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceWriteProtocol
/// 写入属性
/// \param params LMMTRWriteParams
///
/// \param completion LMMTRDeviceResponseHandler
///
- (void)writeAttributeWithParams:(LMMTRWriteParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceWriteProtocol>
- (void)writeAttributeWithParams:(LMMTRWriteParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end

@class LMMTRInvokeParams;

/// 调用接口
SWIFT_PROTOCOL("_TtP8LMMatter25LMMTRDeviceInvokeProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceInvokeProtocol
/// 调用命令
/// \param params LMMTRInvokeParams
///
/// \param completion LMMTRDeviceResponseHandler
///
- (void)invokeCommandWithParams:(LMMTRInvokeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceInvokeProtocol>
- (void)invokeCommandWithParams:(LMMTRInvokeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end



SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter))
/// 读取endpoints下的Cluster
- (void)readClusters:(NSNumber * _Nonnull)endpointID completionHandler:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))completionHandler;
/// 获取设备的Endpoint列表
- (void)readEndpointsWithCompletionHandler:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))completionHandler;
@end

@class LMMTRReadEventParams;

/// 读取接口
SWIFT_PROTOCOL("_TtP8LMMatter23LMMTRDeviceReadProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceReadProtocol
/// 读取属性
/// \param params LMMTRReadAttributeParams
///
/// \param completion LMMTRDeviceResponseHandler
///
- (void)readAttributeWithParams:(LMMTRReadAttributeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
/// 读取属性
/// \param params LMMTRReadEventParams
///
/// \param completion LMMTRDeviceResponseHandler
///
- (void)readEventWithParams:(LMMTRReadEventParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceReadProtocol>
- (void)readAttributeWithParams:(LMMTRReadAttributeParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
- (void)readEventWithParams:(LMMTRReadEventParams * _Nonnull)params completion:(MTRDeviceResponseHandler _Nonnull)completion;
@end

@class LMMTROpenPairingWindowParams;

/// 配对窗口相关接口
SWIFT_PROTOCOL("_TtP8LMMatter26LMMTRPairingWindowProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRPairingWindowProtocol
/// 打开配对窗口
/// \param params LMMTROpenCommissioningWindowParams
///
/// \param completion LMMTRCommissioningWindowCallBack
///
- (void)openPairingWindowWithParams:(LMMTROpenPairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// 关闭配对窗口
/// <ul>
///   <li>
///     params: LMMTROpenPairingWindowParams
///   </li>
///   <li>
///     completion: LMMTRClosePairingWindowCallBack
///   </li>
/// </ul>
- (void)closePairingWindowWithParams:(LMMTRClosePairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRPairingWindowProtocol>
- (void)openPairingWindowWithParams:(LMMTROpenPairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)closePairingWindowWithParams:(LMMTRClosePairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRCommissioningWindowProtocol>
- (void)openCommissioningWindowWithParams:(LMMTROpenCommissioningWindowParams * _Nonnull)params completion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
- (void)closeCommissioningWindowWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
@end

@class LMMTRSubscribeAttributeParams;
@class LMMTRSubscribeEventParams;
@class LMMTRSubscribeAllParams;
@class MTRAttributeReport;
@class MTREventReport;

/// 订阅接口
SWIFT_PROTOCOL("_TtP8LMMatter28LMMTRDeviceSubscribeProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceSubscribeProtocol
/// 订阅属性
/// \param params LMMTRSubscribeAttributeParams
///
/// \param reportHandler MTRDeviceResponseHandler
///
/// \param completion MTRSubscriptionEstablishedHandler
///
- (void)subscribeToAttributesWithParams:(LMMTRSubscribeAttributeParams * _Nonnull)params reportHandler:(MTRDeviceResponseHandler _Nonnull)reportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 订阅事件
/// \param params LMMTRSubscribeEventParams
///
/// \param reportHandler MTRDeviceResponseHandler
///
/// \param completion MTRSubscriptionEstablishedHandler
///
- (void)subscribeToEventsWithParams:(LMMTRSubscribeEventParams * _Nonnull)params reportHandler:(MTRDeviceResponseHandler _Nonnull)reportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 订阅所有属性
/// \param params LMMTRSubscribeAllParams
///
/// \param attributeReportHandler LMMTRAttributeReportHandler
///
/// \param eventReportHandler LMMTREventReportHandler
///
/// \param completion LMMTRSubscriptionEstablishedHandler
///
- (void)subscribeAllWithParams:(LMMTRSubscribeAllParams * _Nonnull)params attributeReportHandler:(void (^ _Nullable)(NSArray<MTRAttributeReport *> * _Nonnull))attributeReportHandler eventReportHandler:(void (^ _Nullable)(NSArray<MTREventReport *> * _Nonnull))eventReportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// 注销远端设备所有订阅上报
/// \param queue 执行队列
///
/// \param completion 回调
///
- (void)deregisterReportHandlersWithWithqueue:(dispatch_queue_t _Nonnull)queue completion:(void (^ _Nonnull)(void))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceSubscribeProtocol>
- (void)subscribeToAttributesWithParams:(LMMTRSubscribeAttributeParams * _Nonnull)params reportHandler:(MTRDeviceResponseHandler _Nonnull)reportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)subscribeToEventsWithParams:(LMMTRSubscribeEventParams * _Nonnull)params reportHandler:(MTRDeviceResponseHandler _Nonnull)reportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)subscribeAllWithParams:(LMMTRSubscribeAllParams * _Nonnull)params attributeReportHandler:(void (^ _Nullable)(NSArray<MTRAttributeReport *> * _Nonnull))attributeReportHandler eventReportHandler:(void (^ _Nullable)(NSArray<MTREventReport *> * _Nonnull))eventReportHandler completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)deregisterReportHandlersWithWithqueue:(dispatch_queue_t _Nonnull)queue completion:(void (^ _Nonnull)(void))completion;
@end

@class MTROperationalCredentialsClusterNOCResponseParams;
@class HMAccessorySetupResult;

/// Fabric相关接口
SWIFT_PROTOCOL("_TtP8LMMatter19LMMTRFabricProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRFabricProtocol
/// 获取Fabric列表
/// \param completion LMMTRGetFabricsListCallback
///
- (void)fetchFabricsListWithCompletion:(void (^ _Nullable)(NSArray * _Nullable, NSError * _Nullable))completion;
/// 获取当前FabricIndex
/// \param completion LMMTRFetchCurrentFabricIndexCallBack
///
- (void)fetchCurrentFabricIndexWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)fetchCommissionedFabricsNumberWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
/// 更新当前Fabric名称
/// \param lable String
///
/// \param completion LMMTRUpdateFabricLableCallBack
///
- (void)updateFabricLabelWithLable:(NSString * _Nonnull)lable completion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
/// 移除指定Fabric
/// \param fabricIndex NSNumber
///
/// \param completion LMMTRRemoceFabricCallBack
///
- (void)removeFabricWithFabricIndex:(NSNumber * _Nonnull)fabricIndex completion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
/// 移除当前Fabric
/// \param completion LMMTRRemoceFabricCallBack
///
- (void)removeCurrentFabricWithCompletion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
/// 移除所有Fabric
/// \param params LMMTRRemoveFabricParams
///
/// \param completion LMMTRRemoceFabricCallBack
///
- (void)removeAllFabricsWithCompletion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
/// 分享设备到AppleEcosystem
/// \param completion 回调
///
- (void)shareToAppleHomeWithCompletion:(void (^ _Nullable)(HMAccessorySetupResult * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter)) <LMMTRFabricProtocol>
- (void)fetchFabricsListWithCompletion:(void (^ _Nullable)(NSArray * _Nullable, NSError * _Nullable))completion;
- (void)fetchCurrentFabricIndexWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)fetchCommissionedFabricsNumberWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)updateFabricLabelWithLable:(NSString * _Nonnull)lable completion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
- (void)removeFabricWithFabricIndex:(NSNumber * _Nonnull)fabricIndex completion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
- (void)removeCurrentFabricWithCompletion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
- (void)removeAllFabricsWithCompletion:(void (^ _Nullable)(MTROperationalCredentialsClusterNOCResponseParams * _Nullable, NSError * _Nullable))completion;
- (void)shareToAppleHomeWithCompletion:(void (^ _Nullable)(HMAccessorySetupResult * _Nullable, NSError * _Nullable))completion;
@end

@class MTRBaseClusterIdentify;
@class MTRBaseClusterGroups;
@class MTRBaseClusterOnOff;
@class MTRBaseClusterLevelControl;
@class MTRBaseClusterDescriptor;
@class MTRBaseClusterBinding;
@class MTRBaseClusterAccessControl;
@class MTRBaseClusterActions;
@class MTRBaseClusterBasicInformation;
@class MTRBaseClusterOTASoftwareUpdateProvider;
@class MTRBaseClusterOTASoftwareUpdateRequestor;
@class MTRBaseClusterLocalizationConfiguration;
@class MTRBaseClusterPowerSourceConfiguration;
@class MTRBaseClusterPowerSource;
@class MTRBaseClusterGeneralCommissioning;
@class MTRBaseClusterNetworkCommissioning;
@class MTRBaseClusterDiagnosticLogs;
@class MTRBaseClusterGeneralDiagnostics;
@class MTRBaseClusterSoftwareDiagnostics;
@class MTRBaseClusterThreadNetworkDiagnostics;
@class MTRBaseClusterWiFiNetworkDiagnostics;
@class MTRBaseClusterEthernetNetworkDiagnostics;
@class MTRBaseClusterBridgedDeviceBasicInformation;
@class MTRBaseClusterSwitch;
@class MTRBaseClusterAdministratorCommissioning;
@class MTRBaseClusterOperationalCredentials;
@class MTRBaseClusterGroupKeyManagement;
@class MTRBaseClusterFixedLabel;
@class MTRBaseClusterUserLabel;
@class MTRBaseClusterBooleanState;
@class MTRBaseClusterModeSelect;
@class MTRBaseClusterDoorLock;
@class MTRBaseClusterWindowCovering;
@class MTRBaseClusterPumpConfigurationAndControl;
@class MTRBaseClusterThermostat;
@class MTRBaseClusterFanControl;
@class MTRBaseClusterThermostatUserInterfaceConfiguration;
@class MTRBaseClusterColorControl;
@class MTRBaseClusterBallastConfiguration;
@class MTRBaseClusterIlluminanceMeasurement;
@class MTRBaseClusterTemperatureMeasurement;
@class MTRBaseClusterPressureMeasurement;
@class MTRBaseClusterFlowMeasurement;
@class MTRBaseClusterRelativeHumidityMeasurement;
@class MTRBaseClusterOccupancySensing;
@class MTRBaseClusterWakeOnLAN;
@class MTRBaseClusterChannel;
@class MTRBaseClusterTargetNavigator;
@class MTRBaseClusterMediaPlayback;
@class MTRBaseClusterMediaInput;
@class MTRBaseClusterLowPower;
@class MTRBaseClusterKeypadInput;
@class MTRBaseClusterContentLauncher;
@class MTRBaseClusterAudioOutput;
@class MTRBaseClusterApplicationLauncher;
@class MTRBaseClusterApplicationBasic;
@class MTRBaseClusterAccountLogin;
@class MTRBaseClusterUnitTesting;

SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevice (SWIFT_EXTENSION(LMMatter))
- (MTRBaseClusterIdentify * _Nullable)identify:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterGroups * _Nullable)groups:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterOnOff * _Nullable)onOff:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterLevelControl * _Nullable)levelControl:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterDescriptor * _Nullable)descriptor:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterBinding * _Nullable)binding:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterAccessControl * _Nullable)accessControl:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterActions * _Nullable)actions:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterBasicInformation * _Nullable)basicInformation:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterOTASoftwareUpdateProvider * _Nullable)otaSoftwareUpdateProvider:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterOTASoftwareUpdateRequestor * _Nullable)otaSoftwareUpdateRequestor:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterLocalizationConfiguration * _Nullable)localizationConfiguration:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterLocalizationConfiguration * _Nullable)timeFormatLocalization:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterLocalizationConfiguration * _Nullable)unitLocalization:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterPowerSourceConfiguration * _Nullable)powerSourceConfiguration:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterPowerSource * _Nullable)powerSource:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterGeneralCommissioning * _Nullable)generalCommissioning:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterNetworkCommissioning * _Nullable)networkCommissioning:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterDiagnosticLogs * _Nullable)diagnosticLogs:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterGeneralDiagnostics * _Nullable)generalDiagnostics:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterSoftwareDiagnostics * _Nullable)softwareDiagnostics:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterThreadNetworkDiagnostics * _Nullable)threadNetworkDiagnostics:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterWiFiNetworkDiagnostics * _Nullable)wifiNetworkDiagnostics:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterEthernetNetworkDiagnostics * _Nullable)ethernetNetworkDiagnostics:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterBridgedDeviceBasicInformation * _Nullable)bridgedDeviceBasicInformation:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterSwitch * _Nullable)switch:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterAdministratorCommissioning * _Nullable)administratorCommissioning:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterOperationalCredentials * _Nullable)operationalCredentials:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterGroupKeyManagement * _Nullable)groupKeyManagement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterFixedLabel * _Nullable)fixedLabel:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterUserLabel * _Nullable)userLabel:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterBooleanState * _Nullable)booleanState:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterModeSelect * _Nullable)modeSelect:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterDoorLock * _Nullable)doorLock:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterWindowCovering * _Nullable)windowCovering:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterPumpConfigurationAndControl * _Nullable)pumpConfigurationAndControl:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterThermostat * _Nullable)thermostat:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterFanControl * _Nullable)fanControl:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterThermostatUserInterfaceConfiguration * _Nullable)thermostatUserInterfaceConfiguration:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterColorControl * _Nullable)colorControl:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterBallastConfiguration * _Nullable)ballastConfiguration:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterIlluminanceMeasurement * _Nullable)illuminanceMeasurement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterTemperatureMeasurement * _Nullable)temperatureMeasurement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterPressureMeasurement * _Nullable)pressureMeasurement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterFlowMeasurement * _Nullable)flowMeasurement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterRelativeHumidityMeasurement * _Nullable)relativeHumidityMeasurement:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterOccupancySensing * _Nullable)occupancySensing:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterWakeOnLAN * _Nullable)wakeOnLan:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterChannel * _Nullable)channel:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterTargetNavigator * _Nullable)targetNavigator:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterMediaPlayback * _Nullable)mediaPlayback:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterMediaInput * _Nullable)mediaInput:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterLowPower * _Nullable)lowPower:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterKeypadInput * _Nullable)keypadInput:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterContentLauncher * _Nullable)contentLauncher:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterAudioOutput * _Nullable)audioOutput:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterApplicationLauncher * _Nullable)applicationLauncher:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterApplicationBasic * _Nullable)applicationBasic:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterAccountLogin * _Nullable)accountLogin:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
- (MTRBaseClusterUnitTesting * _Nullable)testCluster:(NSNumber * _Nonnull)endpointID :(BOOL)needCache SWIFT_WARN_UNUSED_RESULT;
@end

@class MTRDeviceAttestationInfo;

/// 设备调试回调
SWIFT_PROTOCOL("_TtP8LMMatter30LMMTRDeviceAttestationDelegate_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceAttestationDelegate
@optional
/// 回调包含VID+PID的MTRSetupPayload
- (void)setupPayloadReloadWithSetupPayload:(MTRSetupPayload * _Nonnull)setupPayload;
/// 回调设备证书信息，外部校验后，回调验证结果
- (void)validateDeviceCredential:(MTRDeviceAttestationInfo * _Nonnull)attestationInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Matter设备管理类
SWIFT_CLASS("_TtC8LMMatter28LMMTRDeviceControllerManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRCommissionDeviceProtocol>
- (void)commissionDeviceWithWifiParams:(LMMTRWiFiNetworkParams * _Nullable)wifiParams threadParams:(LMMTRThreadNetworkParams * _Nullable)threadParams;
@end


/// 设备相关接口
SWIFT_PROTOCOL("_TtP8LMMatter19LMMTRDeviceProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRDeviceProtocol
/// 获取连接中的设备
/// \param nodeID 设备Id
///
/// \param completion LMMTRDeviceConnectionCallback
///
- (void)getConnectedDeviceWith:(NSNumber * _Nonnull)nodeID completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceProtocol>
- (void)getConnectedDeviceWith:(NSNumber * _Nonnull)nodeID completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairingWindowProtocol>
- (void)openPairingWindowWithParams:(LMMTROpenPairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)closePairingWindowWithParams:(LMMTRClosePairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// 配对设备过程中获取设备相关信息的接口
SWIFT_PROTOCOL("_TtP8LMMatter29LMMTRPairDeviceHelperProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRPairDeviceHelperProtocol
/// 读取配对设备的VID和PID
/// \param completion 回调
///
- (void)readVendorIDAndProductIDWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
/// 读取支持的入网类型
/// \param completion 回调
///
- (void)readNetworkInterfaceWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
/// 读取设备类型
/// \param completion 回调
///
- (void)readDeviceTypeListWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairDeviceHelperProtocol>
- (void)readVendorIDAndProductIDWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
- (void)readNetworkInterfaceWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)readDeviceTypeListWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
@end

@class LMMTRSetupPayloadParams;
@class LMMTRUnPairDeviceParams;
@class LMMTRStopPairDeviceParams;

/// 配对相关接口
SWIFT_PROTOCOL("_TtP8LMMatter23LMMTRPairDeviceProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRPairDeviceProtocol
/// 设备配对
/// \param params LMMTROnboardingPayloadParams
///
///
/// returns:
/// LMMTRDevice
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams completionHandler:(void (^ _Nonnull)(LMMTRDevice * _Nullable, NSError * _Nullable))completionHandler;
/// 设备配对
/// \param params LMMTROnboardingPayloadParams
///
/// \param completion 配对回调
///
- (void)pairDeviceWithAppleHomeParams:(LMMTRAppleHomeParams * _Nonnull)appleHomeParams completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
/// 设备配对
/// \param params LMMTRSetupPayloadParams
///
/// \param deviceAttestationCallBack 调试回调
///
/// \param completion 配对回调
///
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams deviceAttestationCallBack:(void (^ _Nullable)(NSError * _Nullable, void (^ _Nullable)(BOOL)))deviceAttestationCallBack completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
/// 解除配对设备
/// \param params LMMTRUnPairDeviceParams
///
/// \param completion 解除配对回调
///
- (void)unpairDeviceWithParams:(LMMTRUnPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
/// 停止配对设备
/// \param params LMMTRStopPairDeviceParams
///
/// \param completion 停止配对回调
///
- (void)stopDevicePairingWithParams:(LMMTRStopPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairDeviceProtocol>
- (void)pairDeviceWithAppleHomeParams:(LMMTRAppleHomeParams * _Nonnull)appleHomeParams completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=16.4);
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams deviceAttestationCallBack:(void (^ _Nullable)(NSError * _Nullable, void (^ _Nullable)(BOOL)))deviceAttestationCallBack completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams completionHandler:(void (^ _Nonnull)(LMMTRDevice * _Nullable, NSError * _Nullable))completionHandler;
- (void)stopDevicePairingWithParams:(LMMTRStopPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
- (void)unpairDeviceWithParams:(LMMTRUnPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDeviceControllerManager (SWIFT_EXTENSION(LMMatter)) <LMMTRControllerProtocol>
- (BOOL)startMatterControllerWithLocalCertWithParams:(LMMTRLocalCertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerWithRCACertWithParams:(LMMTRRCACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerWithICACertWithParams:(LMMTRICACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerFromExtensionAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopMatterController;
@end



SWIFT_CLASS("_TtC8LMMatter25LMMTRDevicePairingUtility") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevicePairingUtility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MTRDeviceController;

SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevicePairingUtility (SWIFT_EXTENSION(LMMatter)) <MTRDeviceAttestationDelegate>
- (void)deviceAttestationFailedForController:(MTRDeviceController * _Nonnull)controller opaqueDeviceHandle:(void * _Nonnull)opaqueDeviceHandle error:(NSError * _Nonnull)error;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevicePairingUtility (SWIFT_EXTENSION(LMMatter)) <LMMTRCommissionDeviceProtocol>
- (void)commissionDeviceWithWifiParams:(LMMTRWiFiNetworkParams * _Nullable)wifiParams threadParams:(LMMTRThreadNetworkParams * _Nullable)threadParams;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevicePairingUtility (SWIFT_EXTENSION(LMMatter)) <LMMTRPairDeviceHelperProtocol>
- (void)readVendorIDAndProductIDWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
- (void)readNetworkInterfaceWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)readDeviceTypeListWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRDevicePairingUtility (SWIFT_EXTENSION(LMMatter)) <MTRDeviceControllerDelegate>
- (void)controller:(MTRDeviceController * _Nonnull)controller statusUpdate:(MTRCommissioningStatus)status;
- (void)controller:(MTRDeviceController * _Nonnull)controller commissioningComplete:(NSError * _Nullable)error;
- (void)controller:(MTRDeviceController * _Nonnull)controller commissioningSessionEstablishmentDone:(NSError * _Nullable)error;
@end




typedef SWIFT_ENUM(int32_t, LMMTRDeviceType, closed) {
  LMMTRDeviceTypeUnknown = 0,
  LMMTRDeviceTypeRootNode = 22,
  LMMTRDeviceTypePowerSource = 17,
  LMMTRDeviceTypeOTARequestor = 18,
  LMMTRDeviceTypeOTAProvider = 20,
  LMMTRDeviceTypeAggregator = 14,
  LMMTRDeviceTypeBridgedNode = 19,
  LMMTRDeviceTypeOnOffLight = 256,
  LMMTRDeviceTypeDimmableLight = 257,
  LMMTRDeviceTypeColorTemperatureLight = 268,
  LMMTRDeviceTypeExtendedColorLight = 269,
  LMMTRDeviceTypeOnOffPluginUnit = 266,
  LMMTRDeviceTypeDimmablePlugInUnit = 267,
  LMMTRDeviceTypePump = 771,
  LMMTRDeviceTypeOnOffLightSwitch = 259,
  LMMTRDeviceTypeDimmerSwitch = 260,
  LMMTRDeviceTypeColorDimmerSwitch = 261,
  LMMTRDeviceTypeControlBridge = 2112,
  LMMTRDeviceTypePumpController = 772,
  LMMTRDeviceTypeGenericSwitch = 15,
  LMMTRDeviceTypeContactSensor = 21,
  LMMTRDeviceTypeLightSensor = 262,
  LMMTRDeviceTypeOccupancySensor = 263,
  LMMTRDeviceTypeTemperatureSensor = 770,
  LMMTRDeviceTypePressureSensor = 773,
  LMMTRDeviceTypeFlowSensor = 774,
  LMMTRDeviceTypeHumiditySensor = 775,
  LMMTRDeviceTypeOnOffSensor = 2128,
  LMMTRDeviceTypeDoorLock = 10,
  LMMTRDeviceTypeDoorLockController = 11,
  LMMTRDeviceTypeWindowCovering = 514,
  LMMTRDeviceTypeWindowCoveringController = 515,
  LMMTRDeviceTypeHeatingCoolingUnit = 768,
  LMMTRDeviceTypeThermostat = 769,
  LMMTRDeviceTypeFan = 43,
  LMMTRDeviceTypeCastingVideoPlayer = 35,
  LMMTRDeviceTypeSpeaker = 34,
  LMMTRDeviceTypeContentApp = 36,
  LMMTRDeviceTypeBasicVideoPlayer = 40,
  LMMTRDeviceTypeCastingVideoClient = 41,
  LMMTRDeviceTypeVideoRemoteControl = 42,
  LMMTRDeviceTypeModeSelect = 39,
};





SWIFT_CLASS("_TtC8LMMatter18LMMTRDispatchGorup")
@interface LMMTRDispatchGorup : NSObject
/// 初始化(异步线程，主线程异步回调)
/// \param lable 线程名称
///
- (nonnull instancetype)init:(NSString * _Nonnull)lable OBJC_DESIGNATED_INITIALIZER;
/// 初始化
/// \param workQueue 工作线程
///
/// \param callBackQueue 回调线程
///
- (nonnull instancetype)initWithWorkQueue:(dispatch_queue_t _Nonnull)workQueue callBackQueue:(dispatch_queue_t _Nonnull)callBackQueue;
/// 所有任务执行完毕回调
/// \param work 工作任务
///
- (void)completionWithExecute:(void (^ _Nonnull)(void))work;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Matter错误码
typedef SWIFT_ENUM(NSInteger, LMMTRErrorCode, closed) {
/// 未知错误
  LMMTRErrorCodeUnknown = 0xFFFF0000,
/// 参数错误
  LMMTRErrorCodeParamsError = 0xFFFF0001,
/// Matter控制器未启动
  LMMTRErrorCodeNotRunning = 0xFFFF0002,
/// 配对失败
  LMMTRErrorCodePairFaild = 0xFFFF0003,
/// 证书错误
  LMMTRErrorCodeCertError = 0xFFFF0004,
/// 证书已失效
  LMMTRErrorCodeCertHasExpired = 0xFFFF0005,
/// 不支持此设备
  LMMTRErrorCodeUnSupportDevice = 0xFFFF0006,
/// 配对码错误
  LMMTRErrorCodePairingCodeError = 0xFFFF0007,
/// ThreadNetwork未找到
  LMMTRErrorCodeThreadNetworkNotFound = 0xFFFF0008,
};

@class LMMTRManager;

/// 资源更新相关回调
SWIFT_PROTOCOL("_TtP8LMMatter34LMMTRManagerResourceUpdateDelegate_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRManagerResourceUpdateDelegate
@optional
/// Attribute更新回调
- (void)onLMMTRManagerDeviceAttributeUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device attributeReport:(NSArray<MTRAttributeReport *> * _Nullable)attributeReport;
/// Event更新回调
- (void)onLMMTRManagerDeviceEventUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device eventReport:(NSArray<MTREventReport *> * _Nullable)eventReport;
@end


/// 设备更新相关回调
SWIFT_PROTOCOL("_TtP8LMMatter32LMMTRManagerDeviceUpdateDelegate_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRManagerDeviceUpdateDelegate
@optional
/// 添加设备回调
/// \param device LMMTRDevice
///
/// \param error Error
///
- (void)onLMMTRManagerAddDeviceCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nullable)device error:(NSError * _Nullable)error;
/// 删除设备回调
/// \param device LMMTRDevice
///
/// \param error Error
///
- (void)onLMMTRManagerDeleteDeviceCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device error:(NSError * _Nullable)error;
/// 设备更新回调
/// \param device LMMTRDevice
///
/// \param error Error
///
- (void)onLMMTRManagerDeviceUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device error:(NSError * _Nullable)error;
@end


/// 配对相关回调
SWIFT_PROTOCOL("_TtP8LMMatter30LMMTRManagerPairDeviceDelegate_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRManagerPairDeviceDelegate
@optional
/// 配对状态回调
/// \param status MTRCommissioningStatus
///
- (void)onLMMTRManagerPairDeviceStatusUpdateWithManager:(LMMTRManager * _Nonnull)manager :(MTRCommissioningStatus)status;
/// 建立会话成功回调
- (void)onLMMTRManagerCommissioningSessionEstablishmentDoneWithManager:(LMMTRManager * _Nonnull)manager;
@end


/// LMMatterManager代理回调
SWIFT_PROTOCOL("_TtP8LMMatter20LMMTRManagerDelegate_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRManagerDelegate <LMMTRDeviceAttestationDelegate, LMMTRManagerDeviceUpdateDelegate, LMMTRManagerPairDeviceDelegate, LMMTRManagerResourceUpdateDelegate>
@end

@class LMMTRInitParams;

SWIFT_CLASS("_TtC8LMMatter21LMMTRExtensionManager") SWIFT_AVAILABILITY(ios_app_extension,introduced=16.4) SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRExtensionManager : NSObject <LMMTRManagerDelegate>
@property (nonatomic) NSError * _Nullable error;
- (nonnull instancetype)initWithInitParams:(LMMTRInitParams * _Nonnull)initParams;
- (void)onLMMTRManagerCommissioningSessionEstablishmentDoneWithManager:(LMMTRManager * _Nonnull)manager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8LMMatter22LMMTRFabricKeysUtility") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRFabricKeysUtility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRFabricKeysUtility (SWIFT_EXTENSION(LMMatter)) <MTRKeypair>
- (SecKeyRef _Nonnull __unsafe_unretained)publicKey SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)signMessageECDSA_DER:(NSData * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC8LMMatter16LMMTRHTTPManager")
@interface LMMTRHTTPManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LMMTRRoom;

/// 家信息
SWIFT_CLASS("_TtC8LMMatter9LMMTRHome") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRHome : NSObject
@property (nonatomic, copy) NSString * _Nullable home;
@property (nonatomic, copy) NSString * _Nullable homeID;
@property (nonatomic, copy) NSArray<LMMTRRoom *> * _Nullable rooms;
- (nonnull instancetype)initWithHome:(NSString * _Nonnull)home homeID:(NSString * _Nullable)homeID rooms:(NSArray<LMMTRRoom *> * _Nonnull)rooms;
/// YYModel
+ (NSDictionary<NSString *, id> * _Nonnull)modelContainerPropertyGenericClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 家庭信息
SWIFT_CLASS("_TtC8LMMatter13LMMTRHomeInfo") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRHomeInfo : NSObject
@property (nonatomic, copy) NSArray<LMMTRHome *> * _Nullable homes;
- (nonnull instancetype)initWithHomes:(NSArray<LMMTRHome *> * _Nonnull)homes;
/// YYModel
+ (NSDictionary<NSString *, id> * _Nonnull)modelContainerPropertyGenericClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter16LMMTRStartParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRStartParams : NSObject
/// 厂商ID
@property (nonatomic, strong) NSNumber * _Nullable vendorID;
/// fabricID
@property (nonatomic, strong) NSNumber * _Nullable fabricID;
/// 初始化
- (nonnull instancetype)initWithVendorID:(NSNumber * _Nonnull)vendorID fabricID:(NSNumber * _Nonnull)fabricID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter23LMMTRICACertStartParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRICACertStartParams : LMMTRStartParams
/// ipk
@property (nonatomic, copy) NSString * _Nullable ipk;
/// RCA证书
@property (nonatomic, copy) NSString * _Nullable rcaCert;
/// ICA证书
@property (nonatomic, copy) NSString * _Nullable icaCert;
/// ICA密钥对
@property (nonatomic, copy) NSString * _Nullable icaKeyPair;
/// authTag
@property (nonatomic, copy) NSSet<NSNumber *> * _Nullable caseAuthenticatedTags;
/// 是否跳过证书认证
@property (nonatomic) BOOL shouldSkipAttestationCertificateValidation;
/// 初始化
- (nonnull instancetype)initWithVendorID:(NSNumber * _Nonnull)vendorID fabricID:(NSNumber * _Nonnull)fabricID ipk:(NSString * _Nonnull)ipk rcaCert:(NSString * _Nonnull)rcaCert icaCert:(NSString * _Nonnull)icaCert icaKeyPair:(NSString * _Nonnull)icaKeyPair caseAuthenticatedTags:(NSSet<NSNumber *> * _Nullable)caseAuthenticatedTags shouldSkipAttestationCertificateValidation:(BOOL)shouldSkipAttestationCertificateValidation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 初始化配置参数
SWIFT_CLASS("_TtC8LMMatter15LMMTRInitParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRInitParams : NSObject
/// 日志级别 默认all
@property (nonatomic) NSInteger logLevel;
@property (nonatomic, copy) NSString * _Nonnull appGroupKey;
/// 是否是调试模式，调试模式下允许添加测试设备
@property (nonatomic) BOOL debugMode;
- (nonnull instancetype)initWithAppGroupKey:(NSString * _Nonnull)appGroupKey debugMode:(BOOL)debugMode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 初始化相关接口
SWIFT_PROTOCOL("_TtP8LMMatter17LMMTRInitProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRInitProtocol
/// 初始化Matter管理类
- (void)initMatterManagerWithParams:(LMMTRInitParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
/// 反初始化Matter管理类
- (void)deinitMatterManager;
@end


/// 调用参数模型
SWIFT_CLASS("_TtC8LMMatter17LMMTRInvokeParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRInvokeParams : NSObject
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 命令Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull commandID;
/// 命令字段
@property (nonatomic) id _Nullable commandFields;
/// 超时时间 默认10s
@property (nonatomic, strong) NSNumber * _Nonnull timeoutMs;
/// 回调线程 默认是主线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 初始化
- (nonnull instancetype)initWithEndpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID commandID:(NSNumber * _Nonnull)commandID commandFields:(id _Nullable)commandFields timeoutMs:(NSNumber * _Nonnull)timeoutMs queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LMMatter18LMMTRKeyChainShare") SWIFT_AVAILABILITY(ios_app_extension,introduced=16.4) SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRKeyChainShare : NSObject
- (nonnull instancetype)initWithAppGroupKey:(NSString * _Nonnull)appGroupKey;
+ (void)setNodeID:(NSNumber * _Nullable)nodeID;
+ (void)setPairSuccess:(BOOL)flag;
+ (void)setDeviceName:(NSString * _Nullable)deviceName;
+ (void)setHomes:(NSString * _Nullable)str;
+ (void)setICACertStartParams:(NSString * _Nullable)str;
+ (void)setRCACertStartParams:(NSString * _Nullable)str;
+ (void)setSelectThreadDataset:(NSString * _Nullable)str;
+ (void)setCommissionError:(NSError * _Nullable)error;
+ (void)setNetworkType:(NSNumber * _Nullable)type;
+ (void)setNetworkName:(NSString * _Nullable)name;
+ (NSNumber * _Nullable)getNodeID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)getPairSuccess SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceName SWIFT_WARN_UNUSED_RESULT;
+ (LMMTRHomeInfo * _Nullable)getHomes SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getICACertStartParams SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getRCACertStartParams SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSelectThreadDataset SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nullable)getCommissionError SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)getNetworkType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getNetworkName SWIFT_WARN_UNUSED_RESULT;
/// 清除UserDefaults缓存的Matter证书内容
+ (void)cleanCertificate;
+ (void)cleanCache;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios_app_extension,introduced=16.4) SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRKeyChainShare (SWIFT_EXTENSION(LMMatter))
- (void)userDefaultSetValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
- (id _Nullable)userDefaultGetValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8LMMatter25LMMTRLocalCertStartParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRLocalCertStartParams : LMMTRStartParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter9LMMTRLock")
@interface LMMTRLock : NSLock
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Lumi Matter管理类
SWIFT_CLASS("_TtC8LMMatter12LMMTRManager") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LMMTRManager * _Nonnull instance;)
+ (LMMTRManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// 配置参数
@property (nonatomic, strong) LMMTRInitParams * _Nullable initParams;
- (LMMTRInitParams * _Nullable)initParams SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
/// Matter控制器是否正在运行
@property (nonatomic, readonly) BOOL isRunning;
/// 是否是调试模式，调试模式下允许添加测试设备
@property (nonatomic, readonly) BOOL isDebugMode;
/// 分配给控制器的NodeId
@property (nonatomic, readonly, strong) NSNumber * _Nullable controllerNodeId;
@property (nonatomic, strong) LMMTRDeviceControllerManager * _Nonnull controllerManager;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRCommissionDeviceProtocol>
- (void)commissionDeviceWithWifiParams:(LMMTRWiFiNetworkParams * _Nullable)wifiParams threadParams:(LMMTRThreadNetworkParams * _Nullable)threadParams;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceProtocol>
- (void)getConnectedDeviceWith:(NSNumber * _Nonnull)nodeID completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRInitProtocol>
- (void)initMatterManagerWithParams:(LMMTRInitParams * _Nonnull)params SWIFT_METHOD_FAMILY(none);
- (void)deinitMatterManager;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairingWindowProtocol>
- (void)openPairingWindowWithParams:(LMMTROpenPairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
- (void)closePairingWindowWithParams:(LMMTRClosePairingWindowParams * _Nonnull)params completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairDeviceHelperProtocol>
- (void)readVendorIDAndProductIDWithCompletion:(void (^ _Nullable)(MTRSetupPayload * _Nullable, NSError * _Nullable))completion;
- (void)readNetworkInterfaceWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
- (void)readDeviceTypeListWithCompletion:(void (^ _Nullable)(NSNumber * _Nullable, NSError * _Nullable))completion;
@end


/// 消息相关接口
SWIFT_PROTOCOL("_TtP8LMMatter20LMMTRMessageProtocol_") SWIFT_AVAILABILITY(ios,introduced=16.4)
@protocol LMMTRMessageProtocol
/// 注册消息回调
/// \param delegate 代理对象
///
/// \param callBackQueue 回调队列
///
- (void)registerMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate :(dispatch_queue_t _Nonnull)callBackQueue;
/// 移除消息回调
/// \param delegate 代理对象
///
- (void)unRegisterMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate;
/// 移除所有消息回调
- (void)unRegisterAllMessage;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRMessageProtocol>
- (void)registerMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate :(dispatch_queue_t _Nonnull)callBackQueue;
- (void)unRegisterMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate;
- (void)unRegisterAllMessage;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRControllerProtocol>
- (BOOL)startMatterControllerWithLocalCertWithParams:(LMMTRLocalCertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerWithRCACertWithParams:(LMMTRRCACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerWithICACertWithParams:(LMMTRICACertStartParams * _Nonnull)params error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMatterControllerFromExtensionAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stopMatterController;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRManager (SWIFT_EXTENSION(LMMatter)) <LMMTRPairDeviceProtocol>
- (void)pairDeviceWithAppleHomeParams:(LMMTRAppleHomeParams * _Nonnull)appleHomeParams completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion SWIFT_AVAILABILITY(ios,introduced=16.4);
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams completionHandler:(void (^ _Nonnull)(LMMTRDevice * _Nullable, NSError * _Nullable))completionHandler;
- (void)pairDeviceWithSetupPayloadParams:(LMMTRSetupPayloadParams * _Nonnull)setupPayloadParams deviceAttestationCallBack:(void (^ _Nullable)(NSError * _Nullable, void (^ _Nullable)(BOOL)))deviceAttestationCallBack completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
- (void)unpairDeviceWithParams:(LMMTRUnPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
- (void)stopDevicePairingWithParams:(LMMTRStopPairDeviceParams * _Nonnull)params completion:(void (^ _Nullable)(LMMTRDevice * _Nullable, NSError * _Nullable))completion;
@end






/// 消息处理转发类，用来处理一对多的回调事件
SWIFT_CLASS("_TtC8LMMatter19LMMTRMessageHandler") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LMMTRMessageHandler * _Nonnull instance;)
+ (LMMTRMessageHandler * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler (SWIFT_EXTENSION(LMMatter)) <LMMTRManagerPairDeviceDelegate>
- (void)onLMMTRManagerPairDeviceStatusUpdateWithManager:(LMMTRManager * _Nonnull)manager :(MTRCommissioningStatus)status;
- (void)onLMMTRManagerCommissioningSessionEstablishmentDoneWithManager:(LMMTRManager * _Nonnull)manager;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler (SWIFT_EXTENSION(LMMatter)) <LMMTRDeviceAttestationDelegate>
- (void)setupPayloadReloadWithSetupPayload:(MTRSetupPayload * _Nonnull)setupPayload;
- (void)validateDeviceCredential:(MTRDeviceAttestationInfo * _Nonnull)attestationInfo completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler (SWIFT_EXTENSION(LMMatter)) <LMMTRManagerResourceUpdateDelegate>
- (void)onLMMTRManagerDeviceAttributeUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device attributeReport:(NSArray<MTRAttributeReport *> * _Nullable)attributeReport;
- (void)onLMMTRManagerDeviceEventUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device eventReport:(NSArray<MTREventReport *> * _Nullable)eventReport;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler (SWIFT_EXTENSION(LMMatter)) <LMMTRManagerDeviceUpdateDelegate>
- (void)onLMMTRManagerAddDeviceCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nullable)device error:(NSError * _Nullable)error;
- (void)onLMMTRManagerDeleteDeviceCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device error:(NSError * _Nullable)error;
- (void)onLMMTRManagerDeviceUpdateCallBackWithManager:(LMMTRManager * _Nonnull)manager device:(LMMTRDevice * _Nonnull)device error:(NSError * _Nullable)error;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRMessageHandler (SWIFT_EXTENSION(LMMatter)) <LMMTRMessageProtocol>
- (void)registerMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate :(dispatch_queue_t _Nonnull)callBackQueue;
- (void)unRegisterMessageWithDelegate:(id <LMMTRManagerDelegate> _Nonnull)delegate;
- (void)unRegisterAllMessage;
@end



SWIFT_CLASS("_TtC8LMMatter23LMMTROTAProviderUtility") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTROTAProviderUtility : NSObject <MTROTAProviderDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 打开配对窗口参数
SWIFT_CLASS("_TtC8LMMatter34LMMTROpenCommissioningWindowParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTROpenCommissioningWindowParams : NSObject
/// 持续时间 默认60s
@property (nonatomic, strong) NSNumber * _Nonnull duration;
/// 鉴别参数
@property (nonatomic, strong) NSNumber * _Nonnull discriminator;
/// 配对码
@property (nonatomic, strong) NSNumber * _Nullable setupPIN;
/// 操作线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 初始化
- (nonnull instancetype)initWithDuration:(NSNumber * _Nonnull)duration discriminator:(NSNumber * _Nonnull)discriminator setupPIN:(NSNumber * _Nullable)setupPIN queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 打开配对窗口参数
SWIFT_CLASS("_TtC8LMMatter28LMMTROpenPairingWindowParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTROpenPairingWindowParams : NSObject
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 超时时间 默认60s
@property (nonatomic, strong) NSNumber * _Nonnull timeout;
/// 鉴别参数
@property (nonatomic, strong) NSNumber * _Nullable discriminator;
/// 配对码
@property (nonatomic, strong) NSNumber * _Nullable setupPIN;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID timeout:(NSNumber * _Nonnull)timeout discriminator:(NSNumber * _Nullable)discriminator setupPIN:(NSNumber * _Nullable)setupPIN OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// 日志级别
typedef SWIFT_ENUM(NSInteger, LMMTRPrintLevel, closed) {
/// 不输出日志
  LMMTRPrintLevelNone = 0b0000,
/// 输出调试日志
  LMMTRPrintLevelDebug = 0b0001,
/// 输出错误日志
  LMMTRPrintLevelError = 0b0010,
/// 输出信息日志
  LMMTRPrintLevelInfo = 0b0100,
/// 输出追踪日志
  LMMTRPrintLevelTrace = 0b1000,
/// 输出所有日志
  LMMTRPrintLevelAll = 0b1111,
};


SWIFT_CLASS("_TtC8LMMatter23LMMTRRCACertStartParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRRCACertStartParams : LMMTRStartParams
/// ipk
@property (nonatomic, copy) NSString * _Nullable ipk;
/// 证书
@property (nonatomic, copy) NSString * _Nullable rcaCert;
/// 密钥对
@property (nonatomic, copy) NSString * _Nullable rcaKeyPair;
/// authTag
@property (nonatomic, copy) NSSet<NSNumber *> * _Nullable caseAuthenticatedTags;
/// 是否跳过证书认证
@property (nonatomic) BOOL shouldSkipAttestationCertificateValidation;
/// 初始化
- (nonnull instancetype)initWithVendorID:(NSNumber * _Nonnull)vendorID fabricID:(NSNumber * _Nonnull)fabricID ipk:(NSString * _Nonnull)ipk rcaCert:(NSString * _Nonnull)rcaCert rcaKeyPair:(NSString * _Nonnull)rcaKeyPair caseAuthenticatedTags:(NSSet<NSNumber *> * _Nullable)caseAuthenticatedTags shouldSkipAttestationCertificateValidation:(BOOL)shouldSkipAttestationCertificateValidation;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MTRReadParams;

/// 读取Attribute参数模型
SWIFT_CLASS("_TtC8LMMatter24LMMTRReadAttributeParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRReadAttributeParams : NSObject
/// 读取参数
@property (nonatomic, strong) MTRReadParams * _Nonnull params;
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 属性Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull attributeID;
/// 是否需要过滤
@property (nonatomic) BOOL fabricFiltered;
/// 回调线程 默认是主线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 是否使用缓存数据 默认NO
@property (nonatomic) BOOL userCache;
/// 初始化
- (nonnull instancetype)initWithEndpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID attributeID:(NSNumber * _Nonnull)attributeID fabricFiltered:(BOOL)fabricFiltered queue:(dispatch_queue_t _Nonnull)queue userCache:(BOOL)userCache OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 读取Event参数模型
SWIFT_CLASS("_TtC8LMMatter20LMMTRReadEventParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRReadEventParams : NSObject
/// 读取参数
@property (nonatomic, strong) MTRReadParams * _Nonnull params;
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 属性Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull eventId;
/// 是否需要过滤
@property (nonatomic) BOOL fabricFiltered;
/// 回调线程 默认是主线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 初始化
- (nonnull instancetype)initWithEndpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID eventId:(NSNumber * _Nonnull)eventId fabricFiltered:(BOOL)fabricFiltered queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LMMatter18LMMTRRecursiveLock")
@interface LMMTRRecursiveLock : NSRecursiveLock
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Rome
SWIFT_CLASS("_TtC8LMMatter9LMMTRRoom") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRRoom : NSObject
@property (nonatomic, copy) NSString * _Nullable rome;
@property (nonatomic, copy) NSString * _Nullable romeID;
- (nonnull instancetype)initWithRome:(NSString * _Nonnull)rome romeID:(NSString * _Nullable)romeID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LMMatter23LMMTRSetupPayloadParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRSetupPayloadParams : LMMTRBasePairDeviceParams
/// 配对内容
@property (nonatomic, strong) MTRSetupPayload * _Nonnull setupPayload;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID setupPayload:(MTRSetupPayload * _Nonnull)setupPayload failSafeExpiryTimeoutSecs:(NSNumber * _Nonnull)failSafeExpiryTimeoutSecs OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID failSafeExpiryTimeoutSecs:(NSNumber * _Nonnull)failSafeExpiryTimeoutSecs SWIFT_UNAVAILABLE;
@end



/// 设备停止配对参数
SWIFT_CLASS("_TtC8LMMatter25LMMTRStopPairDeviceParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRStopPairDeviceParams : NSObject
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LMMatter19LMMTRStorageUtility") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRStorageUtility : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRStorageUtility (SWIFT_EXTENSION(LMMatter)) <MTRStorage>
- (NSData * _Nullable)storageDataForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setStorageData:(NSData * _Nonnull)value forKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeStorageDataForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@class MTRSubscribeParams;

/// 订阅参数模型基类
SWIFT_CLASS("_TtC8LMMatter24LMMTRSubscribeBaseParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRSubscribeBaseParams : NSObject
/// 订阅参数
@property (nonatomic, strong) MTRSubscribeParams * _Nonnull params;
/// 回调线程 默认是主线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 最小时间间隔 默认2s
@property (nonatomic, strong) NSNumber * _Nonnull minInterval;
/// 最大时间间隔 默认60s
@property (nonatomic, strong) NSNumber * _Nonnull maxInterval;
/// 是否保留之前的订阅保留
/// 默认值为false
/// false 订阅将取消任何现有的订阅目标节点，重新设置新的节点。
/// true 该订阅将允许保留之前的任何订阅。
@property (nonatomic) BOOL replaceExistingSubscriptions;
/// 订阅是否自动尝试重新建立
/// 默认值为false
/// false 丢失订阅只会导致错误报告。一些订阅api不支持此值。
/// true 丢失订阅将会导致自动重新订阅。如果成功，subscriptionEstablished回调将会再次调用。
@property (nonatomic) BOOL resubscribeAutomatically;
/// 初始化
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 订阅所有属性
SWIFT_CLASS("_TtC8LMMatter23LMMTRSubscribeAllParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRSubscribeAllParams : LMMTRSubscribeBaseParams
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically OBJC_DESIGNATED_INITIALIZER;
@end


/// 订阅指定的属性
SWIFT_CLASS("_TtC8LMMatter29LMMTRSubscribeAttributeParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRSubscribeAttributeParams : LMMTRSubscribeBaseParams
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 属性Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull attributeID;
/// 初始化
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically endpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID attributeID:(NSNumber * _Nonnull)attributeID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically SWIFT_UNAVAILABLE;
@end



/// 订阅指定的事件
SWIFT_CLASS("_TtC8LMMatter25LMMTRSubscribeEventParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRSubscribeEventParams : LMMTRSubscribeBaseParams
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 属性Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull eventId;
/// 初始化
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically endpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID eventId:(NSNumber * _Nonnull)eventId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithQueue:(dispatch_queue_t _Nonnull)queue minInterval:(NSNumber * _Nonnull)minInterval maxInterval:(NSNumber * _Nonnull)maxInterval keepPreviousSubscriptions:(BOOL)keepPreviousSubscriptions resubscribeAutomatically:(BOOL)resubscribeAutomatically SWIFT_UNAVAILABLE;
@end


/// Thread网络参数信息
SWIFT_CLASS("_TtC8LMMatter24LMMTRThreadNetworkParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRThreadNetworkParams : NSObject
/// Thread网络名称
@property (nonatomic, copy) NSString * _Nonnull networkName;
/// Thread extendedPANID
@property (nonatomic, copy) NSString * _Nonnull extendedPANID;
/// Thread masterKey
@property (nonatomic, copy) NSString * _Nonnull masterKey;
/// Thread psKc
@property (nonatomic, copy) NSString * _Nonnull psKc;
/// Thread channel
@property (nonatomic) uint16_t channel;
/// Thread panId
@property (nonatomic, copy) NSString * _Nonnull panID;
/// 初始化
- (nonnull instancetype)initWithNetworkName:(NSString * _Nonnull)networkName extendedPANID:(NSString * _Nonnull)extendedPANID masterKey:(NSString * _Nonnull)masterKey psKc:(NSString * _Nonnull)psKc channel:(uint16_t)channel panID:(NSString * _Nonnull)panID OBJC_DESIGNATED_INITIALIZER;
/// 生成 MTRThreadOperationalDataset
@property (nonatomic, readonly, copy) NSData * _Nullable threadOperationalDataset;
+ (LMMTRThreadNetworkParams * _Nullable)creatWith:(NSString * _Nonnull)operationalDatasetStr SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 设备解除配对参数
SWIFT_CLASS("_TtC8LMMatter23LMMTRUnPairDeviceParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRUnPairDeviceParams : NSObject
/// 设备Id
@property (nonatomic, strong) NSNumber * _Nonnull nodeID;
/// 初始化
- (nonnull instancetype)initWithNodeID:(NSNumber * _Nonnull)nodeID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// WiFi网络参数信息
SWIFT_CLASS("_TtC8LMMatter22LMMTRWiFiNetworkParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRWiFiNetworkParams : NSObject
/// WiFi名称
@property (nonatomic, copy) NSString * _Nonnull ssid;
/// WiFi密码
@property (nonatomic, copy) NSString * _Nonnull password;
/// 初始化
- (nonnull instancetype)initWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 写入参数模型
SWIFT_CLASS("_TtC8LMMatter16LMMTRWriteParams") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRWriteParams : NSObject
/// 端点Id
@property (nonatomic, strong) NSNumber * _Nonnull endpointID;
/// 集群Id（数值内容参考MTRClusterIDType）
@property (nonatomic, strong) NSNumber * _Nonnull clusterID;
/// 属性Id（数值内容参考MTRClusterAttributeIDType）
@property (nonatomic, strong) NSNumber * _Nonnull attributeID;
/// 参数值 [MTRTypeKey: Any, [MTRValueKey: Any]]
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable value;
/// 超时时间 默认10s
@property (nonatomic, strong) NSNumber * _Nonnull timeoutMs;
/// 回调线程 默认是主线程
@property (nonatomic, strong) dispatch_queue_t _Nonnull queue;
/// 初始化
- (nonnull instancetype)initWithEndpointID:(NSNumber * _Nonnull)endpointID clusterID:(NSNumber * _Nonnull)clusterID attributeID:(NSNumber * _Nonnull)attributeID value:(NSDictionary<NSString *, id> * _Nullable)value timeoutMs:(NSNumber * _Nonnull)timeoutMs queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// X509Helper
SWIFT_CLASS("_TtC8LMMatter15LMMTRX509Helper") SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRX509Helper : NSObject
/// 读取X509证书Issuer
///
/// returns:
/// Base64 IssuerStr
+ (NSString * _Nullable)readIssuerWithCertificateData:(NSData * _Nonnull)certificateData SWIFT_WARN_UNUSED_RESULT;
/// 读取X509证书的AuthorityKeyID (2.5.29.35）
+ (NSString * _Nullable)readAuthorityKeyIDFrom:(NSData * _Nonnull)certificateData SWIFT_WARN_UNUSED_RESULT;
/// 读取X509证书的SubjectKeyID (2.5.29.14）
+ (NSString * _Nullable)readSubjectKeyIDFrom:(NSData * _Nonnull)certificateData SWIFT_WARN_UNUSED_RESULT;
/// 验证X509证书链
+ (void)validateCertificateChainWithCertificate:(SecCertificateRef _Nonnull)certificate anchorCertificate:(SecCertificateRef _Nonnull)anchorCertificate completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// 验证X509证书链
+ (void)validateCertificateChainWithCertificateData:(NSData * _Nonnull)certificateData anchorCertificateData:(NSData * _Nonnull)anchorCertificateData completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// 验证证书的有效期
+ (BOOL)validateCertificateExpirationWithCertStr:(NSString * _Nullable)certStr SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)validateCertificateExpirationWithCertData:(NSData * _Nullable)certData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_AVAILABILITY(ios,introduced=16.4)
@interface LMMTRX509Helper (SWIFT_EXTENSION(LMMatter))
/// 使用OpenSSL获取X.509证书的标准化的颁发者序列和 authority key identifier 数据
+ (NSString * _Nullable)openssl_getCertificateDetailsFrom:(NSData * _Nonnull)certificateData SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNetService;
@class NSNetServiceBrowser;

SWIFT_CLASS("_TtC8LMMatter24LMMTRmDNSDiscoverManager")
@interface LMMTRmDNSDiscoverManager : LMMTRDiscoverManager
@property (nonatomic, copy) NSArray<NSNetService *> * _Nonnull services;
@property (nonatomic, copy) void (^ _Nullable onDiscoverCallBack)(void);
- (void)startDiscoverOfType:(NSString * _Nonnull)ofType inDomain:(NSString * _Nonnull)inDomain discoverCallBack:(void (^ _Nullable)(void))discoverCallBack;
- (void)stopDiscover;
- (void)destory;
@property (nonatomic, strong) NSNetServiceBrowser * _Nonnull serviceBrower;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LMMTRmDNSDiscoverManager (SWIFT_EXTENSION(LMMatter)) <NSNetServiceDelegate>
- (void)netServiceDidResolveAddress:(NSNetService * _Nonnull)sender;
- (void)netService:(NSNetService * _Nonnull)sender didNotResolve:(NSDictionary<NSString *, NSNumber *> * _Nonnull)errorDict;
@end


@interface LMMTRmDNSDiscoverManager (SWIFT_EXTENSION(LMMatter)) <NSNetServiceBrowserDelegate>
- (void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didFindService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
- (void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didRemoveService:(NSNetService * _Nonnull)service moreComing:(BOOL)moreComing;
- (void)netServiceBrowser:(NSNetServiceBrowser * _Nonnull)browser didNotSearch:(NSDictionary<NSString *, NSNumber *> * _Nonnull)errorDict;
@end


/// 从DCL请求PAA证书
SWIFT_CLASS("_TtC8LMMatter19LMPAACertificateReq")
@interface LMPAACertificateReq : NSObject
/// 证书subjectKeyId
@property (nonatomic, copy) NSString * _Nonnull subject;
/// 证书issuerId
@property (nonatomic, copy) NSString * _Nonnull subjectKeyId;
/// 初始化
- (nonnull instancetype)initWithSubject:(NSString * _Nonnull)subject subjectKeyId:(NSString * _Nonnull)subjectKeyId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// DCL返回PAA证书
SWIFT_CLASS("_TtC8LMMatter20LMPAACertificateResp")
@interface LMPAACertificateResp : NSObject
/// 错误码
@property (nonatomic, copy) NSString * _Nullable code;
/// 请求ID
@property (nonatomic, copy) NSString * _Nullable requestId;
/// 错误信息
@property (nonatomic, copy) NSString * _Nullable msgDetails;
/// 详细信息
@property (nonatomic, copy) NSArray * _Nullable details;
/// PAA证书信息
@property (nonatomic, strong) LMApprovedCertificates * _Nullable approvedCertificates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end































































#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
